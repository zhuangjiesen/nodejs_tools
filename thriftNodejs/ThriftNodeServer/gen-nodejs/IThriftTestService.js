//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./IThriftTestService_types');
//HELPER FUNCTIONS AND STRUCTURES

var IThriftTestService_showThriftResult_args = function(args) {
  this.name = null;
  this.b2 = null;
  this.m2 = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.b2 !== undefined && args.b2 !== null) {
      this.b2 = args.b2;
    }
    if (args.m2 !== undefined && args.m2 !== null) {
      this.m2 = Thrift.copyMap(args.m2, [null]);
    }
  }
};
IThriftTestService_showThriftResult_args.prototype = {};
IThriftTestService_showThriftResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.b2 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.m2 = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.m2[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IThriftTestService_showThriftResult_args.prototype.write = function(output) {
  output.writeStructBegin('IThriftTestService_showThriftResult_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.b2 !== null && this.b2 !== undefined) {
    output.writeFieldBegin('b2', Thrift.Type.BOOL, 2);
    output.writeBool(this.b2);
    output.writeFieldEnd();
  }
  if (this.m2 !== null && this.m2 !== undefined) {
    output.writeFieldBegin('m2', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.m2));
    for (var kiter8 in this.m2)
    {
      if (this.m2.hasOwnProperty(kiter8))
      {
        var viter9 = this.m2[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IThriftTestService_showThriftResult_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
IThriftTestService_showThriftResult_result.prototype = {};
IThriftTestService_showThriftResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IThriftTestService_showThriftResult_result.prototype.write = function(output) {
  output.writeStructBegin('IThriftTestService_showThriftResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IThriftTestServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
IThriftTestServiceClient.prototype = {};
IThriftTestServiceClient.prototype.seqid = function() { return this._seqid; };
IThriftTestServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
IThriftTestServiceClient.prototype.showThriftResult = function(name, b2, m2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_showThriftResult(name, b2, m2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_showThriftResult(name, b2, m2);
  }
};

IThriftTestServiceClient.prototype.send_showThriftResult = function(name, b2, m2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('showThriftResult', Thrift.MessageType.CALL, this.seqid());
  var args = new IThriftTestService_showThriftResult_args();
  args.name = name;
  args.b2 = b2;
  args.m2 = m2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IThriftTestServiceClient.prototype.recv_showThriftResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IThriftTestService_showThriftResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('showThriftResult failed: unknown result');
};
var IThriftTestServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
IThriftTestServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
IThriftTestServiceProcessor.prototype.process_showThriftResult = function(seqid, input, output) {
  var args = new IThriftTestService_showThriftResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.showThriftResult.length === 3) {
    Q.fcall(this._handler.showThriftResult, args.name, args.b2, args.m2)
      .then(function(result) {
        var result_obj = new IThriftTestService_showThriftResult_result({success: result});
        output.writeMessageBegin("showThriftResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("showThriftResult", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.showThriftResult(args.name, args.b2, args.m2, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IThriftTestService_showThriftResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("showThriftResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("showThriftResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
